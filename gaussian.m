classdef gaussian < handle
    %UNTITLED Summary of this class goes here
    %   Detailed explanation goes here
    
    properties
        fit
        x
        y
    end
    
    methods
        function obj = gaussian(x,y,option)
            if nargin<3
                error('Enter more arguments');
            end
            obj.x=x;
            switch option
                case 'norm'
                    obj.y = y./max(y);
                    [mx,lc]=max(obj.y);                  
                    start_guesses = [min(obj.y),mx,obj.x(lc),0.5];
                    obj.fit = obj.gaussFit(obj.x,obj.y,start_guesses);
                otherwise
                    obj.y=y;
                    [mx,lc]=max(obj.y);                  
                    start_guesses = [min(obj.y),mx,obj.x(lc),0.5];
                    obj.fit = obj.gaussFit(obj.x,obj.y,start_guesses);
            end
        end        
        
        function out = grad(obj)
            out = differentiate(obj.fit,obj.x);
        end
        
        function [dy,error] = errorGrad(obj)
            dy = obj.grad;
            error = sqrt((dy./(obj.fit.a-obj.fit.b)).^2.*obj.errorA.^2+...
                (dy./(obj.fit.b-obj.fit.a)).^2.*obj.errorB.^2+...
                (dy./(obj.fit.c-obj.x)+obj.fit.c.*dy./obj.fit.d.^2).^2.*obj.errorC.^2+...
                (-2.*dy./obj.fit.d.^3+2.*(obj.x-obj.fit.c).^2./obj.fit.d.^3.*dy).^2.*obj.errorD.^2);
            figure;
            plot(obj.x,dy);
            hold on
            plot(obj.x,dy+error,'r--');
            plot(obj.x,dy-error,'r--');
            hold off
            
            [mx,lc] = max(abs(dy));
            sprintf('Maximum gradient = %0f +- %0f',mx,error(lc))         
        end
            
    end
    
    methods (Access = private)
        function [fitresult, gof] = gaussFit(obj,x, y,start_guesses)
            %CREATEFIT(X,RFS)
            %  Create a fit.
            %
            %  Data for 'untitled fit 1' fit:
            %      X Input : x
            %      Y Output: rfs
            %  Output:
            %      fitresult : a fit object representing the fit.
            %      gof : structure with goodness-of fit info.
            %
            %  See also FIT, CFIT, SFIT.

            %  Auto-generated by MATLAB on 28-Apr-2016 17:00:39


            %% Fit: 'untitled fit 1'.
            [xData, yData] = prepareCurveData( x, y );

            % Set up fittype and options.
            ft = fittype( 'a+(b-a)*exp(-(x-c)^2/(2*d^2))', 'independent', 'x', 'dependent', 'y' );
            opts = fitoptions( 'Method', 'NonlinearLeastSquares' );
            opts.Display = 'Off';
            opts.Lower = [0 -Inf -Inf -Inf];
            opts.MaxFunEvals = 1000;
            opts.MaxIter = 1000;
            opts.Robust = 'Bisquare';
            opts.StartPoint = start_guesses;

            % Fit model to data.
            [fitresult, gof] = fit( xData, yData, ft, opts );

            % Plot fit with data.
            figure( 'Name', 'untitled fit 1' );
            h = plot( fitresult, xData, yData );
            legend( h, 'rfs vs. x', 'untitled fit 1', 'Location', 'NorthEast' );
            % Label axes
            xlabel x
            ylabel rfs
            grid on
        end
        
        function out = errorA(obj)
            m = confint(obj.fit);
           out = (m(2,1)-m(1,1))/2;
        end
        
        function out = errorB(obj)
            m = confint(obj.fit);
            out = (m(2,2)-m(1,2))/2;
        end
        
        function out = errorC(obj)
            m = confint(obj.fit);
            out = (m(2,3)-m(1,3))/2;
        end
        
        function out = errorD(obj)
            m = confint(obj.fit);
            out = (m(2,4)-m(1,4))/2;
        end
        
    end
    
end

